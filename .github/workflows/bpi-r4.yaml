name: bpi-r4_wifi - Build remote repo only if new commits were pushed
on:
  workflow_dispatch:
  push:
  schedule:
    - cron: '0 7 * * *'
jobs:
  check:
    name: Check remote repo for new commits
    runs-on: ubuntu-latest
    steps:
      - name: Use GitHub API to poll commits
        run: |
          curl -sL "https://api.github.com/repos/$REMOTE_REPOSITORY/commits?sha=$REMOTE_BRANCH&per_page=1" | jq -r '[.[]][0]' > commit.json
        env:
          REMOTE_REPOSITORY: danpawlik/openwrt
          REMOTE_BRANCH: be14
      - name: Calculate hours since last commit
        id: calc
        run: |
          date="$(jq -r '.commit.committer.date' commit.json)"
          timestamp=$(date --utc -d "$date" +%s)
          hours=$(( ( $(date --utc +%s) - $timestamp ) / 3600 ))
          echo "Last commit date: $date"
          echo "Hours since last commit: $hours"
          #echo "::set-output name=commit_age::$hours"
    outputs:
      commit_age: ${{ steps.calc.outputs.commit_age }}
  build:
    name: Build the remote repository
    needs: check
    runs-on: ubuntu-latest
    if: ${{ needs.check.outputs.commit_age <= 124 || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Show inputs received from previous job
        env:
          COMMIT_AGE: ${{ needs.check.outputs.commit_age }}
        run: |
          echo "Build triggered with commits last pushed $COMMIT_AGE hours ago"
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget curl
          sudo apt full-upgrade -y
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: danpawlik/openwrt
          ref: be14
      - name: Update and install feeds
        run: |
          pwd
          ls -l ./scripts/
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Generate config
        run: |
          echo 'CONFIG_TARGET_mediatek=y' > .config
          echo 'CONFIG_TARGET_mediatek_filogic=y' >> .config
          echo 'CONFIG_TARGET_mediatek_filogic_DEVICE_bananapi_bpi-r4=y' >> .config
          #
          ########## Config minimal ##########
          #

          echo "CONFIG_PACKAGE_cgi-io=y" >> .config
          echo "CONFIG_PACKAGE_liblucihttp=y" >> .config
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-firewall=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-opkg=y" >> .config
          echo "CONFIG_PACKAGE_luci-base=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-base=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-ip=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-jsonc=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-nixio=y" >> .config
          echo "CONFIG_PACKAGE_luci-mod-admin-full=y" >> .config
          echo "CONFIG_PACKAGE_luci-mod-network=y" >> .config
          echo "CONFIG_PACKAGE_luci-mod-status=y" >> .config
          echo "CONFIG_PACKAGE_luci-mod-system=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-ipv6=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-ppp=y" >> .config
          echo "CONFIG_PACKAGE_luci-theme-bootstrap=y" >> .config
          echo "CONFIG_ALL_KMODS=y" >> .config
          echo "CONFIG_ALL_NONSHARED=y" >> .config
          echo "CONFIG_BPF_TOOLCHAIN_BUILD_LLVM=y" >> .config
          echo "CONFIG_COLLECT_KERNEL_DEBUG=y" >> .config
          echo "CONFIG_HAS_BPF_TOOLCHAIN=y" >> .config
          echo "CONFIG_IB=y" >> .config
          echo "CONFIG_SDK=y" >> .config
          echo "CONFIG_SDK_LLVM_BPF=y" >> .config
          echo "CONFIG_USE_LLVM_BUILD=y" >> .config
          echo "CONFIG_DEVEL=y" >> .config
          echo "CONFIG_JSON_CYCLONEDX_SBOM=y" >> .config
          echo "CONFIG_MAKE_TOOLCHAIN=y" >> .config
          
          #echo "CONFIG_PACKAGE_cgi-io=y" >> .config
          #echo "CONFIG_PACKAGE_kmod-qca-nss-dp=y" >> .config
          #echo "CONFIG_PACKAGE_kmod-qca-ssdk-nohnat=y" >> .config
          #echo "CONFIG_PACKAGE_libiwinfo-lua=y" >> .config
          #echo "CONFIG_PACKAGE_liblua=y" >> .config
          #echo "CONFIG_PACKAGE_liblucihttp=y" >> .config
          #echo "CONFIG_PACKAGE_liblucihttp-lua=y" >> .config          
          #echo "CONFIG_PACKAGE_libubus-lua=y" >> .config
          #echo "CONFIG_PACKAGE_lua=y" >> .config
          #echo "CONFIG_PACKAGE_luci=y" >> .config        
          #echo "CONFIG_PACKAGE_luci-app-firewall=y" >> .config
          #echo "CONFIG_PACKAGE_luci-app-opkg=y" >> .config          
          #echo "CONFIG_PACKAGE_luci-base=y" >> .config
          #echo "CONFIG_PACKAGE_luci-lib-base=y" >> .config   
          #echo "CONFIG_PACKAGE_luci-lib-ip=y" >> .config         
          #echo "CONFIG_PACKAGE_luci-lib-jsonc=y" >> .config       
          #echo "CONFIG_PACKAGE_luci-lib-nixio=y" >> .config  
          #echo "CONFIG_PACKAGE_luci-mod-admin-full=y" >> .config          
          #echo "CONFIG_PACKAGE_luci-mod-network=y" >> .config
          #echo "CONFIG_PACKAGE_luci-mod-status=y" >> .config
          #echo "CONFIG_PACKAGE_luci-mod-system=y" >> .config
          #echo "CONFIG_PACKAGE_luci-proto-ipv6=y" >> .config
          #echo "CONFIG_PACKAGE_luci-proto-ppp=y" >> .config          
          #echo "CONFIG_PACKAGE_luci-theme-bootstrap=y" >> .config          
          #echo "CONFIG_PACKAGE_qca-ssdk-shell=y" >> .config          
          #echo "CONFIG_PACKAGE_rpcd=y" >> .config
          #echo "CONFIG_PACKAGE_rpcd-mod-file=y" >> .config
          #echo "CONFIG_PACKAGE_rpcd-mod-iwinfo=y" >> .config
          #echo "CONFIG_PACKAGE_rpcd-mod-luci=y" >> .config
          #echo "CONFIG_PACKAGE_rpcd-mod-rrdns=y" >> .config      
          #echo "CONFIG_PACKAGE_uhttpd=y" >> .config    
          #echo "CONFIG_PACKAGE_uhttpd-mod-ubus=y" >> .config   
          #echo "CONFIG_PACKAGE_wpad-basic-wolfssl=m" >> .config   
          #echo "CONFIG_PACKAGE_wpad-wolfssl=y" >> .config   
          #echo "CONFIG_PACKAGE_libwolfssl=n\n" >> .config
          #echo "CONFIG_PACKAGE_libwolfssl-cpu-crypto=y" >> .config        
          #
          ########## Config WireGuard ##########
          #
          echo "CONFIG_PACKAGE_kmod-crypto-kpp=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-poly1305=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-blake2s=y" >> .config      
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-curve25519=y" >> .config          
          echo "CONFIG_PACKAGE_kmod-udptunnel4=y" >> .config
          echo "CONFIG_PACKAGE_kmod-udptunnel6=y" >> .config
          echo "CONFIG_PACKAGE_libcares=y" >> .config
          echo "CONFIG_PACKAGE_librt=y" >> .config          

          echo "CONFIG_PACKAGE_luci-app-wireguard=y" >> .config
          echo "CONFIG_PACKAGE_kmod-wireguard=y" >> .config     
          echo "CONFIG_PACKAGE_wireguard-tools=y" >> .config    
          echo "CONFIG_PACKAGE_luci-proto-wireguard=y" >> .config    
          #
          ########## Config Adblock ##########
          #
          echo "CONFIG_PACKAGE_adblock=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-adblock=y" >> .config            
          #
          ########## Config Utilis ##########
          #
          echo "CONFIG_PACKAGE_bash=y" >> .config
          echo "CONFIG_PACKAGE_zlib=m" >> .config
          echo "CONFIG_PACKAGE_htop=y" >> .config   
          echo "CONFIG_PACKAGE_nano=y" >> .config
          #
          ########## Config Statistics ##########
          #
          echo "CONFIG_PACKAGE_collectd=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-cpu=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-interface=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-iwinfo=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-load=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-memory=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-network=y" >> .config
          echo "CONFIG_PACKAGE_librrd1=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-rrdtool=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-statistics=y" >> .config
          echo "CONFIG_PACKAGE_rrdtool1=y" >> .config         
          #
          ########## Config Acme ##########
          echo "CONFIG_PACKAGE_acme=y" >> .config
          echo "CONFIG_PACKAGE_wget-ssl=y" >> .config
          echo "CONFIG_PACKAGE_ca-bundle=y" >> .config
          echo "CONFIG_PACKAGE_openssl-util=y" >> .config
          echo "CONFIG_PACKAGE_socat=y" >> .config
          #
          ########## Qosify ##########
          echo "CONFIG_PACKAGE_qosify=y" >> .config
          #
          ########## Config Others ##########
          #
          echo "CONFIG_PACKAGE_libuci-lua=y" >> .config
          echo "CONFIG_PACKAGE_libreadline=y" >> .config          
          #         
          make defconfig
      - name: Add configuration
        run: |
          mkdir -p files/sbin
          wget https://raw.githubusercontent.com/mstarczewski/OpenWRT_packages/master/sysinfo/files/sbin/sysinfo.sh -P files/sbin
          chmod +x files/sbin/sysinfo.sh
          wget https://raw.githubusercontent.com/mstarczewski/OpenWRT_packages/master/sysinfo/files/etc/profile.d/99-sysinfo.sh -P files/etc/profile.d
      - name: Enable WiFi on default config, disable acme, enable dnscrypt-proxy
        run: |
          mkdir -p files/etc/uci-defaults
          cat > files/etc/uci-defaults/xxx_config << EOF
          uci set wireless.radio0.disabled=0
          uci commit
          /etc/init.d/acme disable
          /etc/init.d/dnscrypt-proxy enable
          /etc/init.d/dnscrypt-proxy restart
          /etc/init.d/adblock restart
          EOF
      - name: Download package sources
        run: make download V=s
      - name: Build tools
        run: |
          make tools/install -j$(nproc) V=s || \
          make tools/install V=s
      - name: Build toolchain
        run: |
          make toolchain/install -j$(nproc) V=s || \
          make toolchain/install V=s
      - name: Build target images
        run: |
          make -j$(nproc) V=s || \
          make V=s
      - name: TAR output
        run: tar -cvf bpi-r4_wifi-images.tar bin/targets/mediatek/filogic
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bpi-r4_wifi-images
          path: bpi-r4_wifi-images.tar
  release:
    name: Upload artifacts as release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download the image artifacts
        uses: actions/download-artifact@v4
        with:
          name:  bpi-r4_wifi-images
      - name: Extract the image artifacts
        run: tar xf  bpi-r4_wifi-images.tar
      - name: Extract version information from version.buildinfo
        run: >-
          echo "BUILDINFO=$(cat bin/targets/mediatek/filogic/version.buildinfo)"
          >> $GITHUB_ENV
      - name: Get current date
        run: echo "NOW=$(date +%F)" >> $GITHUB_ENV          
      - name: Create a release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          prerelease: true
          title: 'Updated prebuilt images (${{ env.BUILDINFO }} ${{ env.NOW }})'
          automatic_release_tag: bpi-r4_wifi-${{ env.NOW }}
          files: bin/targets/mediatek/filogic/*
      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 5
          delete_tags: true          
