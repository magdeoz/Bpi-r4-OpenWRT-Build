---
name: Build OpenWRT for Banana Pi R4 + Luci

on:
  workflow_dispatch:

env:
  REMOTE_REPOSITORY: mstarczewski/openwrt
  REMOTE_BRANCH: main
  RELEASE_PREFIX: bpi-r4_luci

jobs:
  check_commits:
    name: Check Commits
    runs-on: ubuntu-24.04
    outputs:
      latest_commit_sha: ${{ steps.get_sha.outputs.latest_commit_sha }}
    steps:
      - name: Checkout remote repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}

      - name: Get the latest commit SHA
        id: get_sha
        run: |
          echo "latest_commit_sha=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "latest_commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
  build:
    name: Build BPI-R4
    needs: [check_commits]
    runs-on: ubuntu-24.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget curl libattr1-dev \
            libev-dev libpam0g-dev strongswan
          sudo apt full-upgrade -y
      - name: Checkout remote repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}
          
      - name: Clone mtk-Openwrt-feeds feeds
        run: |
          pwd
          ls -al
          pwd
          git clone --branch master https://git01.mediatek.com/openwrt/feeds/mtk-openwrt-feeds
          pwd
          ls -al
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          pwd
          ls -al
      #- name: Update and install feeds
      #  run: |
      #    ./scripts/feeds update -a
      #    ./scripts/feeds install -a
      - name: Filogic 880 (MT7988+MT7996) MTK Reference Board (RFB)
        run: |
          pwd
          bash ./mtk-openwrt-feeds/autobuild/unified/autobuild.sh filogic-mac80211-BE19000 log_file=make
          pwd
      - name: Configure firmware image
        run: |
          echo 'CONFIG_TARGET_mediatek=y' > .config
          echo 'CONFIG_TARGET_mediatek_filogic=y' >> .config
          echo 'CONFIG_TARGET_mediatek_filogic_DEVICE_bananapi_bpi-r4=y' >> .config
          #
          ########## Config minimal ##########
          #

          echo "CONFIG_PACKAGE_cgi-io=y" >> .config
          echo "CONFIG_PACKAGE_liblucihttp=y" >> .config
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_libubus-lua=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-firewall=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-opkg=y" >> .config
          echo "CONFIG_PACKAGE_luci-base=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-base=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-ip=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-jsonc=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-nixio=y" >> .config
          echo "CONFIG_PACKAGE_luci-mod-admin-full=y" >> .config
          echo "CONFIG_PACKAGE_luci-mod-network=y" >> .config
          echo "CONFIG_PACKAGE_luci-mod-status=y" >> .config
          echo "CONFIG_PACKAGE_luci-mod-system=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-ipv6=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-ppp=y" >> .config
          echo "CONFIG_PACKAGE_luci-theme-bootstrap=y" >> .config
          echo "CONFIG_ALL_KMODS=y" >> .config
          echo "CONFIG_ALL_NONSHARED=y" >> .config
          echo "CONFIG_BPF_TOOLCHAIN_BUILD_LLVM=y" >> .config
          echo "CONFIG_COLLECT_KERNEL_DEBUG=y" >> .config
          echo "CONFIG_HAS_BPF_TOOLCHAIN=y" >> .config
          echo "CONFIG_IB=y" >> .config
          echo "CONFIG_SDK=y" >> .config
          echo "CONFIG_SDK_LLVM_BPF=y" >> .config
          echo "CONFIG_USE_LLVM_BUILD=y" >> .config
          echo "CONFIG_DEVEL=y" >> .config
          echo "CONFIG_JSON_CYCLONEDX_SBOM=y" >> .config
          echo "CONFIG_MAKE_TOOLCHAIN=y" >> .config
          echo "CONFIG_PACKAGE_rpcd=y" >> .config
          echo "CONFIG_PACKAGE_rpcd-mod-file=y" >> .config
          echo "CONFIG_PACKAGE_rpcd-mod-iwinfo=y" >> .config
          echo "CONFIG_PACKAGE_rpcd-mod-luci=y" >> .config
          echo "CONFIG_PACKAGE_rpcd-mod-rrdns=y" >> .config      
          echo "CONFIG_PACKAGE_uhttpd=y" >> .config    
          echo "CONFIG_PACKAGE_uhttpd-mod-ubus=y" >> .config   
          echo "CONFIG_PACKAGE_libwolfssl-cpu-crypto=y" >> .config        

          
          #echo "CONFIG_PACKAGE_libwolfssl=n\n" >> .config
          #echo "CONFIG_PACKAGE_lua=y" >> .config
          #echo "CONFIG_PACKAGE_libiwinfo-lua=y" >> .config
          #echo "CONFIG_PACKAGE_liblua=y" >> .config          
          #echo "CONFIG_PACKAGE_liblucihttp-lua=y" >> .config 
          #echo "CONFIG_PACKAGE_rpcd=y" >> .config
          #echo "CONFIG_PACKAGE_rpcd-mod-file=y" >> .config
          #echo "CONFIG_PACKAGE_rpcd-mod-iwinfo=y" >> .config
          #echo "CONFIG_PACKAGE_rpcd-mod-luci=y" >> .config
          #echo "CONFIG_PACKAGE_rpcd-mod-rrdns=y" >> .config      
          #echo "CONFIG_PACKAGE_uhttpd=y" >> .config    
          #echo "CONFIG_PACKAGE_uhttpd-mod-ubus=y" >> .config   
          #echo "CONFIG_PACKAGE_wpad-basic-wolfssl=m" >> .config   
          #echo "CONFIG_PACKAGE_wpad-wolfssl=y" >> .config   
          #
          ########## Config WireGuard ##########
          #
          echo "CONFIG_PACKAGE_kmod-crypto-kpp=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-poly1305=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-blake2s=y" >> .config      
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-curve25519=y" >> .config          
          echo "CONFIG_PACKAGE_kmod-udptunnel4=y" >> .config
          echo "CONFIG_PACKAGE_kmod-udptunnel6=y" >> .config
          echo "CONFIG_PACKAGE_libcares=y" >> .config
          echo "CONFIG_PACKAGE_librt=y" >> .config          

          echo "CONFIG_PACKAGE_luci-app-wireguard=y" >> .config
          echo "CONFIG_PACKAGE_kmod-wireguard=y" >> .config     
          echo "CONFIG_PACKAGE_wireguard-tools=y" >> .config    
          echo "CONFIG_PACKAGE_luci-proto-wireguard=y" >> .config    
          #
          ########## Config Adblock ##########
          #
          echo "CONFIG_PACKAGE_adblock=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-adblock=y" >> .config            
          #
          ########## Config Utilis ##########
          #
          echo "CONFIG_PACKAGE_bash=y" >> .config
          echo "CONFIG_PACKAGE_zlib=y" >> .config
          echo "CONFIG_PACKAGE_htop=y" >> .config   
          echo "CONFIG_PACKAGE_nano=y" >> .config
          echo "CONFIG_PACKAGE_curl=y" >> .config
          #
          ########## Config Statistics ##########
          #
          echo "CONFIG_PACKAGE_collectd=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-cpu=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-interface=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-iwinfo=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-load=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-memory=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-network=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-thermal=y" >> .config
          echo "CONFIG_PACKAGE_librrd1=y" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-rrdtool=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-statistics=y" >> .config
          echo "CONFIG_PACKAGE_rrdtool1=y" >> .config         
          #
          ########## Config Acme ##########
          echo "CONFIG_PACKAGE_acme=y" >> .config
          echo "CONFIG_PACKAGE_wget-ssl=y" >> .config
          echo "CONFIG_PACKAGE_ca-bundle=y" >> .config
          echo "CONFIG_PACKAGE_openssl-util=y" >> .config
          echo "CONFIG_PACKAGE_socat=y" >> .config
          #
          ########## Qosify ##########
          echo "CONFIG_PACKAGE_qosify=y" >> .config
          #
          ########## Config Others ##########
          #
          echo "CONFIG_PACKAGE_libuci-lua=y" >> .config
          echo "CONFIG_PACKAGE_libreadline=y" >> .config          
          #         
          make defconfig

      - name: Add configuration
        run: |
          mkdir -p files/sbin
          wget https://raw.githubusercontent.com/mstarczewski/OpenWRT_packages/master/sysinfo/files/sbin/sysinfo.sh -P files/sbin
          chmod +x files/sbin/sysinfo.sh
          wget https://raw.githubusercontent.com/mstarczewski/OpenWRT_packages/master/sysinfo/files/etc/profile.d/99-sysinfo.sh -P files/etc/profile.d
      - name: Enable WiFi on default config, disable acme, enable dnscrypt-proxy
        run: |
          mkdir -p files/etc/uci-defaults
          cat > files/etc/uci-defaults/xxx_config << EOF
          uci set wireless.radio0.disabled=0
          uci commit
          /etc/init.d/acme disable
          /etc/init.d/dnscrypt-proxy enable
          /etc/init.d/dnscrypt-proxy restart
          /etc/init.d/adblock restart
          EOF
      - name: Remove packages that are marked as modules just to save time
        run: |
          grep "=m" .config | grep -v 'CONFIG_PACKAGE_libustream-mbedtls=m' | while read -r line; do module=$(echo "$line" | cut -f1 -d'='); sed -i "s/^$line$/# $module is not set/" .config; done
      - name: Download dependencies
        run: make -j $(nproc) download

      - name: Build the firmware image
        run: make -j $(nproc) world

      - name: Package output
        run: tar -cvf bpi_r4-images.tar bin/targets/mediatek/filogic

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bpi_r4-images
          path: bpi_r4-images.tar

  release:
    name: Create release
    needs: [build, check_commits]
    if: needs.build.result == 'success'
    runs-on: ubuntu-24.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bpi_r4-images

      - name: Extract artifacts
        run: tar xf bpi_r4-images.tar

      - name: Get current date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV

      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          files: bin/targets/mediatek/filogic/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.REMOTE_BRANCH }}-${{ env.RELEASE_DATE }}
          name: OpenWRT BPI-R4 with BE14 + luci - ${{ env.REMOTE_BRANCH }} - ${{ env.RELEASE_DATE }}
          body: |
            Updated prebuilt images for ${{ env.RELEASE_DATE }}
            Build Commit: ${{ needs.check_commits.outputs.latest_commit_sha }}
      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
